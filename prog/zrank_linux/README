This is a README file for the ZRANK program. ZRANK performs quick and 
effective scoring of initial stage docking predictions, to improve the
ranking of hits. It has been tested using ZDOCK 2.1, 2.3, and 3.0
predictions on Benchmark 2.0. If you use ZRANK in your work, please
reference:

Pierce B, Weng Z (2007) ZRANK: Reranking Protein Docking Predictions with an 
Optimized Energy Function.  Proteins 67(4), 1078-1086.

Usage guidelines:

Input:
The input to ZRANK can be either a ZDOCK output file or a list of PDB files. For
the former, the files listed in lines 3 and 4 of the ZDOCK output file need to be
readable by ZRANK. Polar hydrogens need to be added to the PDB files after the ZDOCK
run (using HBPlus, CHARMM, or RosettaDock). The receptor and ligand PDB files with 
hydrogens can be either substituted in place of the original files, or the filenames 
of the PDBs with hydrogens can be substituted in lines 3 and 4 of the ZDOCK output 
file. It is recommended, though not necessary, to use 6 degree sampling for the 
ZDOCK runs ("-D" option in ZDOCK) as this provides more hits and thus provides optimal 
input for ZRANK.

For using a list of PDB files, the list must be a text file where each line contains
a single file name. Each file must be readable by ZRANK and have the ligand and
receptor atom coordinates separated by a "TER" line. As with the ZDOCK output file
input, the PDB files must have polar hydrogens added in order to be scored correctly.

Syntax:
zrank [listfile] [zdfile start_comp end_comp]

If one argument is given, it is assumed to be a text list of PDB files and is 
parsed accordingly. If three arguments are given, they should be the ZDOCK output
file and the starting and ending numbers of the predictions to score (the first
ZDOCK prediction is numbered 1).

Output:
The ZRANK output file (which is the input file plus ".zr.out") is a file with each 
line containing the score for a prediction. These scores can then be used to rerank 
the predictions, using "sort -n +1 zr_outfile" or more advanced parsing such as perl 
to analyze the scores and rerank.
